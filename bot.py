import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
import sqlite3
from datetime import datetime
import os
from config import ADMIN_IDS


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
WAITING_PHOTO, ADMIN_MENU, ADD_TASK, EDIT_TASK, DELETE_TASK, USER_MODE, WAITING_COMMENT = range(7)
# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
WAITING_PHOTO, ADMIN_MENU, ADD_TASK, EDIT_TASK, DELETE_TASK, USER_MODE, WAITING_COMMENT, SKIP_TASK = range(8)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    db_dir = os.path.join(os.path.dirname(__file__), 'data')
    os.makedirs(db_dir, exist_ok=True)
    
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ë–î –≤ –ø–∞–ø–∫–µ data
    db_path = os.path.join(db_dir, 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('DROP TABLE IF EXISTS completed_tasks')
    cursor.execute('DROP TABLE IF EXISTS task_comments')
    cursor.execute('DROP TABLE IF EXISTS skipped_tasks')
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        description TEXT NOT NULL,
        is_active BOOLEAN DEFAULT 1
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS completed_tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        task_id INTEGER NOT NULL,
        telegram_file_id TEXT,
        file_type TEXT,
        completion_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(task_id) REFERENCES tasks(id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS task_comments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        username TEXT,
        comment TEXT,
        voice_message_id TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(task_id) REFERENCES tasks(id)
    )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        first_name TEXT,
        username TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS skipped_tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        task_id INTEGER NOT NULL,
        reason TEXT,
        voice_message_id TEXT,
        skip_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id),
        FOREIGN KEY(task_id) REFERENCES tasks(id)
    )
    ''')
    conn.commit()
    conn.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    return user_id in ADMIN_IDS

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
def get_tasks(only_active=False):
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    if only_active:
        cursor.execute('SELECT id, description FROM tasks WHERE is_active = 1 ORDER BY id')
    else:
        cursor.execute('SELECT id, description, is_active FROM tasks ORDER BY id')
    
    tasks = cursor.fetchall()
    conn.close()
    return tasks

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
    INSERT OR REPLACE INTO users (id, first_name, username)
    VALUES (?, ?, ?)
    ''', (user.id, user.first_name, user.username))
    conn.commit()
    conn.close()
    
    if is_admin(user.id):
        keyboard = [
            [KeyboardButton("–†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º")],
            [KeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ]
        await update.message.reply_text(
            "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ADMIN_MENU
    else:
        return await user_mode_start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return ConversationHandler.END
    
    await show_admin_menu(update, context)
    return ADMIN_MENU

# –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def user_mode_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = get_tasks(only_active=True)
    
    if not tasks:
        await update.message.reply_text("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return ConversationHandler.END
    
    context.user_data['tasks'] = tasks
    context.user_data['current_task'] = 0
    
    keyboard = [
        [KeyboardButton("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")],
        [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")]
    ]
    
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–∞—à–∞ –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞:\n1. {tasks[0][1]}",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return WAITING_PHOTO
# –ê–¥–º–∏–Ω-–º–µ–Ω—é
async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üì∑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")],
        [KeyboardButton("‚è∏ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"), KeyboardButton("–†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º")]  # –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª Ô∏è
    ]
    await update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ADMIN_MENU
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.message.from_user
        file_id = None
        file_type = None
        
        if update.message.photo:
            photo_file = update.message.photo[-1]
            file_id = photo_file.file_id
            file_type = 'photo'
        elif update.message.video:
            video_file = update.message.video
            file_id = video_file.file_id
            file_type = 'video'
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return WAITING_PHOTO

        tasks = context.user_data.get('tasks', [])
        current_task_idx = context.user_data.get('current_task', 0)
        
        if current_task_idx >= len(tasks):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
        
        task_id = tasks[current_task_idx][0]
        context.user_data['current_task_id'] = task_id

        db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute(
            '''INSERT INTO completed_tasks 
            (user_id, task_id, telegram_file_id, file_type) 
            VALUES (?, ?, ?, ?)''',
            (user.id, task_id, file_id, file_type)
        )
        conn.commit()
        conn.close()

        keyboard = [
            [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")]
        ]
        await update.message.reply_text(
            "üìù –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ):",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return WAITING_COMMENT

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return WAITING_PHOTO

async def show_user_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT ct.telegram_file_id, ct.file_type, u.first_name, u.username, t.description, ct.completion_date
    FROM completed_tasks ct
    JOIN tasks t ON ct.task_id = t.id
    JOIN users u ON ct.user_id = u.id
    WHERE ct.telegram_file_id IS NOT NULL
    ORDER BY ct.completion_date DESC
    LIMIT 10
    ''')
    
    media_items = cursor.fetchall()
    conn.close()
    
    if not media_items:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")
        return
    
    for item in media_items:
        try:
            file_id, file_type, first_name, username, description, completion_date = item
            
            if username:
                user_link = f"<a href='https://t.me/{username}'>{first_name}</a>"
            else:
                user_link = first_name
                
            caption = f"üë§ {user_link}\nüìù {description}\nüïí {completion_date}"
            
            if file_type == 'photo':
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif file_type == 'video':
                await context.bot.send_video(
                    chat_id=update.message.chat_id,
                    video=file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
    
    await update.message.reply_text(
        "–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="show_more_media")]
        ])
    )

async def handle_show_more_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    offset = context.user_data.get('media_offset', 10)
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT ct.telegram_file_id, ct.file_type, u.first_name, u.username, t.description, ct.completion_date
    FROM completed_tasks ct
    JOIN tasks t ON ct.task_id = t.id
    JOIN users u ON ct.user_id = u.id
    WHERE ct.telegram_file_id IS NOT NULL
    ORDER BY ct.completion_date DESC
    LIMIT 10 OFFSET ?
    ''', (offset,))
    
    media_items = cursor.fetchall()
    conn.close()
    
    if not media_items:
        await query.edit_message_text("–ë–æ–ª—å—à–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç.")
        return
    
    for item in media_items:
        try:
            file_id, file_type, first_name, username, description, completion_date = item
            
            if username:
                user_link = f"<a href='https://t.me/{username}'>{first_name}</a>"
            else:
                user_link = first_name
                
            caption = f"üë§ {user_link}\nüìù {description}\nüïí {completion_date}"
            
            if file_type == 'photo':
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif file_type == 'video':
                await context.bot.send_video(
                    chat_id=query.message.chat_id,
                    video=file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
    
    context.user_data['media_offset'] = offset + 10
    
    await query.edit_message_text(
        "–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ 10 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="show_more_media")]
        ])
    )

async def show_comments_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = get_tasks()
    
    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        await show_admin_menu(update, context)
        return ADMIN_MENU
    
    keyboard = []
    for task in tasks:
        keyboard.append([InlineKeyboardButton(
            f"{task[0]}. {task[1]}",
            callback_data=f"view_comments_{task[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_MENU

async def handle_comments_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("view_comments_"):
        task_id = int(query.data.split("_")[2])
        db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT description FROM tasks WHERE id = ?', (task_id,))
        task_description = cursor.fetchone()[0]
        
        cursor.execute('''
        SELECT username, comment, voice_message_id, timestamp 
        FROM task_comments 
        WHERE task_id = ?
        ORDER BY timestamp DESC
        ''', (task_id,))
        comments = cursor.fetchall()
        conn.close()
        
        if not comments:
            await query.edit_message_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        comments_text = []
        for comment in comments:
            username, text_comment, voice_id, timestamp = comment
            if voice_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_voice(
                    chat_id=query.message.chat_id,
                    voice=voice_id,
                    caption=f"üë§ {username}\nüïí {timestamp.split('.')[0]}"
                )
                comments_text.append(f"üë§ {username} (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
            else:
                comments_text.append(
                    f"üë§ {username}\nüí¨ {text_comment}\nüïí {timestamp.split('.')[0]}"
                )
        
        await query.edit_message_text(
            f"üìå –ó–∞–¥–∞—á–∞: {task_description}\n\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n\n" + "\n\n".join(comments_text),
            parse_mode='HTML'
        )

async def save_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    task_id = context.user_data.get('current_task_id')
    
    if not task_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    if update.message.voice:
        voice_id = update.message.voice.file_id
        cursor.execute(
            '''INSERT INTO task_comments 
            (task_id, user_id, username, comment, voice_message_id) 
            VALUES (?, ?, ?, ?, ?)''',
            (task_id, user.id, user.username or user.first_name, None, voice_id)
        )
        await update.message.reply_text("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    else:
        comment = update.message.text
        cursor.execute(
            '''INSERT INTO task_comments 
            (task_id, user_id, username, comment, voice_message_id) 
            VALUES (?, ?, ?, ?, ?)''',
            (task_id, user.id, user.username or user.first_name, comment, None)
        )
        await update.message.reply_text("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    
    conn.commit()
    conn.close()
    
    tasks = context.user_data.get('tasks', [])
    current_task_idx = context.user_data.get('current_task', 0)
    next_task_idx = current_task_idx + 1
    context.user_data['current_task'] = next_task_idx
    
    if next_task_idx < len(tasks):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        keyboard = [
            [KeyboardButton("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")],
            [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")]
        ]
        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:\n{next_task_idx + 1}. {tasks[next_task_idx][1]}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return WAITING_PHOTO
    else:
        await update.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏!",
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
        )
        return ConversationHandler.END

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return ADD_TASK

async def save_new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_description = update.message.text
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO tasks (description) VALUES (?)', (task_description,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_description}")
    await show_admin_menu(update, context)
    return ADMIN_MENU

async def edit_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = get_tasks()
    
    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await show_admin_menu(update, context)
        return ADMIN_MENU
    
    tasks_text = "\n".join(
        f"{task[0]}. {task[1]} {'(–∞–∫—Ç–∏–≤–Ω–∞)' if task[2] else '(–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)'}"
        for task in tasks
    )
    
    await update.message.reply_text(
        f"üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{tasks_text}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1 –∞–∫—Ç–∏–≤–Ω–∞' –∏–ª–∏ '2 –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'):",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return EDIT_TASK

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = context.user_data.get('tasks', [])
    current_task_idx = context.user_data.get('current_task', 0)
    next_task_idx = current_task_idx + 1
    context.user_data['current_task'] = next_task_idx
    
    if next_task_idx < len(tasks):
        keyboard = [
            [KeyboardButton("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")],
            [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")]
        ]
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:\n{next_task_idx + 1}. {tasks[next_task_idx][1]}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return WAITING_PHOTO
    else:
        await update.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏!",
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
        )
        return ConversationHandler.END

async def save_task_changes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        task_id = int(text.split()[0])
        new_status = ' '.join(text.split()[1:]).lower()
        
        if new_status not in ['–∞–∫—Ç–∏–≤–Ω–∞', '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞']:
            raise ValueError
        
        db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT 1 FROM tasks WHERE id = ?', (task_id,))
        if not cursor.fetchone():
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return await show_admin_menu(update, context)
        
        cursor.execute(
            'UPDATE tasks SET is_active = ? WHERE id = ?',
            (1 if new_status == '–∞–∫—Ç–∏–≤–Ω–∞' else 0, task_id)
        )
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: '1 –∞–∫—Ç–∏–≤–Ω–∞' –∏–ª–∏ '2 –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'")
    
    await show_admin_menu(update, context)
    return ADMIN_MENU

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = get_tasks()
    
    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await show_admin_menu(update, context)
        return ADMIN_MENU
    
    tasks_text = "\n".join(
        f"{task[0]}. {task[1]}"
        for task in tasks
    )
    
    await update.message.reply_text(
        f"üóë –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{tasks_text}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return DELETE_TASK

async def confirm_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        task_id = int(update.message.text)
        
        db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT description FROM tasks WHERE id = ?', (task_id,))
        task = cursor.fetchone()
        
        if not task:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return await show_admin_menu(update, context)
        
        cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞: {task[0]}")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
    
    await show_admin_menu(update, context)
    return ADMIN_MENU

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)   
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM completed_tasks')
    total_completed = cursor.fetchone()[0]
    
    cursor.execute('''
    SELECT t.description, COUNT(c.id) as completions 
    FROM tasks t
    LEFT JOIN completed_tasks c ON t.id = c.task_id
    GROUP BY t.id
    ORDER BY completions DESC
    ''')
    tasks_stats = cursor.fetchall()
    
    conn.close()
    
    stats_text = f"üìä –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {total_completed}\n\n"
    stats_text += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:\n"
    stats_text += "\n".join(
        f"{task[0]}: {task[1]} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"
        for task in tasks_stats
    )
    
    await update.message.reply_text(stats_text)
    await show_admin_menu(update, context)
    return ADMIN_MENU

async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ "
        "–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return WAITING_PHOTO

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ Telegram ID"""
    user_id = update.message.from_user.id
    await update.message.reply_text(f"–í–∞—à ID: {user_id}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.", user.first_name)
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return ConversationHandler.END

def check_db_structure():
    conn = None
    try:
        db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
        conn = sqlite3.connect(db_path)        
        cursor = conn.cursor()
        
        cursor.execute("PRAGMA table_info(completed_tasks)")
        columns = [col[1] for col in cursor.fetchall()]
        required_columns = {'id', 'user_id', 'task_id', 'telegram_file_id', 'completion_date'}
        
        if not required_columns.issubset(columns):
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏. –ò–º–µ—é—â–∏–µ—Å—è: {columns}")
            return False
            
        return True
        
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False
    finally:
        if conn:
            conn.close()


def migrate_db():
    db_dir = os.path.join(os.path.dirname(__file__), 'data')
    os.makedirs(db_dir, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    db_path = os.path.join(db_dir, 'tasks.db')
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('ALTER TABLE completed_tasks RENAME TO completed_tasks_old')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('''
        CREATE TABLE completed_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            task_id INTEGER NOT NULL,
            telegram_file_id TEXT,
            completion_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(task_id) REFERENCES tasks(id)
        )
        ''')    
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute('''
        INSERT INTO completed_tasks (id, user_id, task_id, telegram_file_id, completion_date)
        SELECT id, user_id, task_id, photo_path, completion_date 
        FROM completed_tasks_old
        ''')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('DROP TABLE completed_tasks_old')
        
        conn.commit()
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except sqlite3.Error as e:
        conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    finally:
        conn.close()
    
async def skip_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return SKIP_TASK
async def save_skip_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    tasks = context.user_data.get('tasks', [])
    current_task_idx = context.user_data.get('current_task', 0)
    
    if current_task_idx >= len(tasks):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    task_id = tasks[current_task_idx][0]
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    if update.message.voice:
        voice_id = update.message.voice.file_id
        cursor.execute(
            '''INSERT INTO skipped_tasks 
            (user_id, task_id, reason, voice_message_id) 
            VALUES (?, ?, ?, ?)''',
            (user.id, task_id, "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", voice_id)
        )
        await update.message.reply_text("üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        reason = update.message.text
        cursor.execute(
            '''INSERT INTO skipped_tasks 
            (user_id, task_id, reason, voice_message_id) 
            VALUES (?, ?, ?, ?)''',
            (user.id, task_id, reason, None)
        )
        await update.message.reply_text("üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    conn.commit()
    conn.close()
    
    next_task_idx = current_task_idx + 1
    context.user_data['current_task'] = next_task_idx
    
    if next_task_idx < len(tasks):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        keyboard = [
            [KeyboardButton("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")],
            [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")]
        ]
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:\n{next_task_idx + 1}. {tasks[next_task_idx][1]}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return WAITING_PHOTO
    else:
        await update.message.reply_text(
            "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã)!",
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
        )
        return ConversationHandler.END

async def show_skipped_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'tasks.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT st.task_id, t.description, u.first_name, u.username, st.reason, st.voice_message_id, st.skip_date
    FROM skipped_tasks st
    JOIN tasks t ON st.task_id = t.id
    JOIN users u ON st.user_id = u.id
    ORDER BY st.skip_date DESC
    LIMIT 10
    ''')
    
    skipped_tasks = cursor.fetchall()
    conn.close()
    
    if not skipped_tasks:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    for task in skipped_tasks:
        task_id, description, first_name, username, reason, voice_id, skip_date = task
        user_link = f"@{username}" if username else first_name
        
        if voice_id:  # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_voice(
                chat_id=update.message.chat_id,
                voice=voice_id,
                caption=f"‚è∏ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}: {description}\nüë§ {user_link}\nüìÖ {skip_date}"
            )
        else:  # –¢–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞
            await update.message.reply_text(
                f"‚è∏ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}: {description}\n"
                f"üë§ {user_link}\n"
                f"üìÖ {skip_date}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}",
                parse_mode='HTML'
            )
def main():
    migrate_db()
    init_db()
    if not check_db_structure():
        logger.error("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        init_db()
        if not check_db_structure():
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î!")
            return
        
    from config import BOT_TOKEN
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('admin', admin_command),
            CommandHandler('id', get_id)
        ],
        states={
            ADMIN_MENU: [
                MessageHandler(filters.Regex('^–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), show_admin_menu),
                MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$'), add_task),
                MessageHandler(filters.Regex('^–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏$'), edit_tasks),
                MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É$'), delete_task),
                MessageHandler(filters.Regex('^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), show_stats),
                MessageHandler(filters.Regex('^üì∑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ$'), show_user_photos),
                MessageHandler(filters.Regex('^üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏$'), show_comments_menu),
                MessageHandler(filters.Regex('^–†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º$'), user_mode_start),
                MessageHandler(filters.Regex('^‚è∏ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏$'), show_skipped_tasks),
                CallbackQueryHandler(handle_show_more_media, pattern="^show_more_media$"),
                CallbackQueryHandler(handle_comments_callback)
            ],
            WAITING_PHOTO: [
                MessageHandler(filters.Regex('^–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞$'), task_done),
                MessageHandler(filters.Regex('^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É$'), skip_task),
                MessageHandler(filters.PHOTO | filters.VIDEO, receive_photo)
            ],
            SKIP_TASK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_skip_reason),
                MessageHandler(filters.VOICE, save_skip_reason)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö
            ],
              WAITING_COMMENT: [
                MessageHandler(filters.Regex('^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π$'), skip_comment),
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_comment),
                MessageHandler(filters.VOICE, save_comment)
            ],
            ADD_TASK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_task)
            ],
            EDIT_TASK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_task_changes)
            ],
            DELETE_TASK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete_task)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    if not os.path.exists('photos'):    
        os.makedirs('photos')
    main()